extend type Mutation {
    requestAuthCode(
        username: String
    ): String

    authWithCode(
        username: String
        code: String
    ): UserAuthenticationResult!

    givePermissionsToUser(
        userId: String!
        permission: UserPermissions!
    ): String

    removePermissionsFromUser(
        userId: String!
        permission: UserPermissions!
    ): String

    saveUserProfile(
        image: String
        email: String
        username: String!
    ): String
}

extend type Query {
    user: User!
}

type Profile {
    id: String!
    username: String
    email: String
    image: Image
}

union UserAuthenticationResult = UserAuthenticationPayload | UserAuthenticationError

type User {
    id: String!
    phoneNumber: String
    userPermissions: [String!]
    profile: Profile
}

type UserAuthenticationPayload {
    token: String!
    user: User!
}

type UserAuthenticationError {
    code: UserAuthenticationErrorCode!
    message: String!
}

enum UserAuthenticationErrorCode {
    INVALID
    EXPIRED
}

enum UserPermissions {
    ADMIN
    MODER
    MANAGER
    PLACE_OWNER
}
